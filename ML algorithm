import pandas as pd
import numpy as np

print("--- Part 1: The MOST ROBUST Automated Agent Factory (Final Fix) ---")


NFHS_FILE = '/kaggle/input/dataset/NFHS_5_India_Districts_Factsheet_Data.xls'
MASTERF_FILE = '/kaggle/input/dataset/masterF.csv'
URBAN_SPEND_FILE = '/kaggle/input/dataset/StateUT-UrbanMPCRs-Non-food-Non-foodSpendRs-Medical-MedicalSpendRs-Non-medicalSpendRs-LikelyPolicyInte.csv'
GDP_GROWTH_FILE = '/kaggle/input/dataset/Growth of GDP in states.csv'
DEMOGRAPHICS_FILE = '/kaggle/input/dataset/birth and death rates.csv'


NUMBER_OF_AGENTS_TO_CREATE = 50

def load_all_data():
    """Loads all 5 essential raw data files for maximum robustness."""
    try:
        print("Loading all 5 essential raw data files...")
        
        # --- FINAL FIX: Use 'python' engine + skip bad lines ---
        nfhs_df = pd.read_excel(NFHS_FILE, engine='xlrd')  # since it's .xls
        masterf_df = pd.read_csv(MASTERF_FILE, engine='python', on_bad_lines='skip')
        urban_spend_df = pd.read_csv(URBAN_SPEND_FILE, engine='python', on_bad_lines='skip')
        gdp_growth_df = pd.read_csv(GDP_GROWTH_FILE, engine='python', on_bad_lines='skip')
        demographics_df = pd.read_csv(DEMOGRAPHICS_FILE, engine='python', on_bad_lines='skip')

        # Clean up column names for easier access
        masterf_df.columns = masterf_df.columns.str.strip()
        
        print("All data files loaded successfully.")
        return nfhs_df, masterf_df, urban_spend_df, gdp_growth_df, demographics_df

    except FileNotFoundError as e:
        print(f"ERROR: Could not find a required file. Please check your Kaggle input paths. Details: {e}")
        return None, None, None, None, None
    except Exception as e:
        print(f"An unexpected error occurred while loading data: {e}")
        return None, None, None, None, None
def create_robust_agent(agent_id, data_files):
    """
    Creates a single, fully robust agent by synthesizing data from all 5 sources.
    """
    nfhs_df, masterf_df, urban_spend_df, gdp_growth_df, demographics_df = data_files
    
    district_data = nfhs_df.sample(n=1).iloc[0]
    state = district_data['State/UT']
    district = district_data['District Names']
    
    state_master_data = masterf_df[masterf_df['State_UT'] == state]
    if state_master_data.empty:
        state_master_data = masterf_df.sample(n=1)
    state_master_data = state_master_data.iloc[0]

    state_demographics_data = demographics_df[demographics_df['State/UT'] == state]
    if state_demographics_data.empty:
        state_demographics_data = demographics_df.sample(n=1)
    state_demographics_data = state_demographics_data.iloc[0]
    
    location = np.random.choice(['rural', 'urban'], p=[0.65, 0.35])
    
    base_income = state_master_data['Per_Capita_NSDP_2022_23_INR']
    income = np.random.normal(loc=base_income, scale=base_income * 0.4)
    
    # --- FIXED INDENTATION ---
    if location == 'urban':
        urban_spend_data = urban_spend_df[urban_spend_df['State/UT'] == state]
        if not urban_spend_data.empty:
            monthly_spend = urban_spend_data.iloc[0]['Non-medical Spend (Rs.)']
            # Convert safely to float if it's a string
            monthly_spend = pd.to_numeric(monthly_spend, errors='coerce')
            if pd.isna(monthly_spend):
                monthly_spend = (income / 12) * np.random.uniform(0.6, 0.8)
        else:
            monthly_spend = (income / 12) * np.random.uniform(0.6, 0.8)
    else:
        monthly_spend = (income / 12) * np.random.uniform(0.7, 0.9)

    insurance_coverage_pct = district_data['Households with any usual member covered under a health insurance/financing scheme (%)']
    is_insured = np.random.rand() < (insurance_coverage_pct / 100)
    
    infant_mortality = state_master_data['Infant_Mortality_Rate_2020']
    death_rate = state_demographics_data['2020 Death Rate']
    base_risk = 0.05 + (infant_mortality / 1000) + (death_rate / 500)
    health_risk = np.clip(np.random.normal(loc=base_risk, scale=0.05), 0.01, 0.9)

    agent = {
        'agent_id': agent_id, 'district': district, 'state': state, 'location': location,
        'income (₹)': int(max(30000, income)),
        'family_size': np.random.randint(2, 7),
        'age_group': np.random.choice(['young', 'adult', 'senior'], p=[0.2, 0.6, 0.2]),
        'gender_head_of_household': np.random.choice(['Male', 'Female']),
        'health_risk': round(health_risk, 4),
        'is_insured': 'Yes' if is_insured else 'No',
        'literacy': 'Literate' if np.random.rand() < (state_master_data['Literacy_Rate_2011'] / 100) else 'Not Literate',
        'monthly_spend (₹)': int(max(3000, monthly_spend)),
        'policy_interest': state_master_data['Likely_Policy_Interest'],
        'clean_fuel_access_%': district_data['Households using clean fuel for cooking3 (%)'],
        'electricity_access_%': district_data['Population living in households with electricity (%)'],
        'health_insurance_coverage_%': insurance_coverage_pct,
        'infant_mortality_rate': infant_mortality
    }
    return agent

# --- Main Execution Block ---
if __name__ == "__main__":
    all_data = load_all_data()
    
    if all(df is not None for df in all_data):
        print(f"\nGenerating a population of {NUMBER_OF_AGENTS_TO_CREATE} robust agents...")
        
        population_list = [create_robust_agent(i, all_data) for i in range(NUMBER_OF_AGENTS_TO_CREATE)]
        final_population_df = pd.DataFrame(population_list)
        
        output_filename = 'generated_agents_robust_50.csv'
        final_population_df.to_csv(output_filename, index=False)
        
        print(f"\nSUCCESS! Agent Factory has finished.")
        print(f"A new file named '{output_filename}' has been created with {len(final_population_df)} agents.")
        print("This file was created using all 5 data sources for maximum robustness.")
        print("\nHere is a preview of your new virtual population:")
        print(final_population_df.head())
